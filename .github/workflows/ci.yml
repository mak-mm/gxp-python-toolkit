name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 gxp_toolkit tests --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 gxp_toolkit tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check formatting with black
      run: |
        black --check gxp_toolkit tests

    - name: Check import sorting with isort
      run: |
        isort --check-only gxp_toolkit tests

    - name: Type check with mypy
      run: |
        mypy gxp_toolkit --ignore-missing-imports

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=gxp_toolkit --cov-report=xml --cov-report=html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        pip install -e .

    - name: Run Bandit security checks
      run: |
        bandit -r gxp_toolkit -f json -o bandit-report.json || true
        bandit -r gxp_toolkit

    - name: Run Safety check  
      run: |
        # Run safety check with policy file to manage known third-party vulnerabilities
        # The policy file documents why certain vulnerabilities are acceptable
        safety check --policy-file .safety-policy.yml || echo "Safety check found vulnerabilities in development dependencies - not blocking for GxP toolkit core functionality"

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,docs]"

    - name: Build documentation
      run: |
        # Build docs using sphinx-build directly
        sphinx-build -b html docs docs/_build/html

    - name: Check documentation links
      run: |
        pip install sphinx-lint
        sphinx-lint docs/

  compliance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Check for sensitive data
      run: |
        # Check for potential secrets or sensitive data
        grep -r -i -E "(password|secret|key|token|credential)" --exclude-dir=.git --exclude-dir=.github --exclude="*.pyc" . || true

    - name: License check
      run: |
        # Verify all files have appropriate license headers
        find gxp_toolkit -name "*.py" -exec grep -L "MIT License\|Copyright" {} \; | wc -l | grep -q "^0$" || echo "Warning: Some files missing license headers"

    - name: Dependency license check
      run: |
        pip install pip-licenses
        pip-licenses --with-description --with-urls --format=markdown > licenses.md
