[build-system]
requires = ["setuptools>=45", "wheel", "setuptools-scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "gxp-python-toolkit"
version = "0.1.0"
description = "A comprehensive Python toolkit for GxP-compliant software development"
readme = "README.md"
authors = [
    {name = "Manuel Knott", email = "manuel.knott@curevac.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Healthcare Industry",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]
requires-python = ">=3.11"
dependencies = [
    "sqlalchemy>=2.0.0",
    "pydantic>=2.0.0",
    "cryptography>=41.0.0",
    "python-jose[cryptography]>=3.3.0",
    "PyJWT>=2.8.0",
    "passlib>=1.7.4",
    "python-dateutil>=2.8.2",
    "pytz>=2023.3",
    "azure-identity>=1.15.0",
    "azure-keyvault-secrets>=4.7.0",
    "azure-keyvault-keys>=4.8.0",
    "azure-mgmt-authorization>=4.0.0",
    "msal>=1.26.0",
    "click>=8.1.0",
    "rich>=13.7.0",
    "tabulate>=0.9.0",
    "pandas>=2.0.0",
    "openpyxl>=3.1.0",
    "pyyaml>=6.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.4.0",
    "flake8>=6.0.0",
    "pre-commit>=3.3.0",
    "types-python-dateutil>=2.8.0",
    "types-pytz>=2023.3.0",
    "sqlalchemy-stubs>=0.4",
    "python-semantic-release>=8.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "sphinx-copybutton>=0.5.0",
    "myst-parser>=2.0.0",
    "sphinx-design>=0.5.0",
    "furo>=2023.0.0",
    "linkify-it-py>=2.0.0",
]

[project.urls]

[project.scripts]
gxp-validate = "gxp_toolkit.cli:validate"
gxp-audit-report = "gxp_toolkit.cli:audit_report"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "gxp_toolkit.audit_trail.storage"
# SQLAlchemy Column types are complex and dynamic at runtime
ignore_errors = true

[[tool.mypy.overrides]]
module = "gxp_toolkit.cli"
# Click decorators create complex typing that requires extensive refactoring
ignore_errors = true

[[tool.mypy.overrides]]
module = "gxp_toolkit.soft_delete.mixins"
# SQLAlchemy query operations have complex dynamic typing
ignore_errors = true

[[tool.mypy.overrides]]
module = "gxp_toolkit.data_integrity.validation"
# Contains some unreachable code that MyPy flags
ignore_errors = true


[tool.coverage.run]
source = ["gxp_toolkit"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
precision = 2
show_missing = true

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
build_command = "pip install build && python -m build"
dist_path = "dist/"
upload_to_vcs_release = true

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

[tool.semantic_release.remote]
name = "origin"
type = "github"
